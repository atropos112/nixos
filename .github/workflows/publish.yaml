name: Build and Release SD Images
on:
  push:
    tags:
      - 'v*.*.*'
jobs:
  build-and-release:
    name: Build, Publish and Release SD Images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix with KVM enabled
        uses: cachix/install-nix-action@v26
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          enable_kvm: true
          extra_nix_config: |
            extra-platforms = aarch64-linux
      - name: Check nix.conf
        run: cat /etc/nix/nix.conf
      - run: sudo apt -y install qemu-user-static
      - name: Test binfmt availability
        run: |
          cat /proc/sys/fs/binfmt_misc/qemu-aarch64
          /usr/bin/qemu-aarch64-static --version
      - name: Build and Publish SD Image for opi1
        run: |
          nix build .#sdImage-opi1 --verbose --option sandbox false --argstr system aarch64-linux
          mkdir -p ./published-images
          mv ./result/sd-image/*.img.zst ./published-images/opi1.img.zst
      - name: Build and Publish SD Image for opi2
        run: |
          nix build .#sdImage-opi2 --verbose --option sandbox false --argstr system aarch64-linux
          mv ./result/sd-image/*.img.zst ./published-images/opi2.img.zst
      - name: Build and Publish SD Image for opi3
        run: |
          nix build .#sdImage-opi3 --verbose --option sandbox false --argstr system aarch64-linux
          mv ./result/sd-image/*.img.zst ./published-images/opi3.img.zst
      - name: Build and Publish SD Image for opi4
        run: |
          nix build .#sdImage-opi4 --verbose --option sandbox false --argstr system aarch64-linux
          mv ./result/sd-image/*.img.zst ./published-images/opi4.img.zst
      - name: Create release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          gh release create --draft $TAG_NAME --title $TAG_NAME
      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          for file in ./published-images/*; do
            gh release upload $TAG_NAME "$file" --clobber
          done
